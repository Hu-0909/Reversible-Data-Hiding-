# import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt

# 解决中文显示问题
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False

# 展示原图像
img = cv.imread("Lena.jpg")

plt.title('原图像')
plt.imshow(img[:, :, ::-1])
plt.show()

# 绘制直方图
hist = cv.calcHist([img], [0], None, [256], [0, 256])
plt.title('原图像灰度直方图')
plt.plot(hist)
plt.show()

# 进行整张图的遍历找到出现次数最多的点(同一灰度值最多的)
maxPoint = 0  # 记录bin
maxValue = [0]
for i in range(256):
    if maxValue < hist[i]:
        maxPoint = i
        maxValue = hist[i]
print(maxPoint)  # 139  13093
# 找到最少的点
minPoint = 0  # 记录bin
minValue = [10000]
for i in range(maxPoint, 256):
    if minValue > hist[i]:
        minPoint = i
        minValue = hist[i]
# print(minPoint)  # 252  774



# 遍历图片将处于最小点和最大点之间的进行增减操作
for i in range(img.shape[0]):
    for j in range(img.shape[1]):
        if minPoint > img[i, j][0] > maxPoint:
            img[i, j][0] = img[i, j][0] + 1
            img[i, j][1] = img[i, j][1] + 1
            img[i, j][2] = img[i, j][2] + 1

histNew = cv.calcHist([img], [0], None, [256], [0, 256])
plt.title('最大值右侧右移一位后的灰度直方图')

plt.plot(histNew)
plt.show()

# 将0 1串导入图像进行加密
message = '111001011010111110111001111001001011101010001110111001001011100010000000111001001011100010101010' \
          '111001011001110010101000111001011000110010010111111001011011100110110011111001001011110110001111' \
          '111001101000001110101111111001111001101010000100111001001011101010111010111011111011110010001100' \
          '111001011000001110001111111001101000100010010001111011111011110010001100111001011000011010101100' \
          '111001011010010010101001111010001010011010000001111001101001100010101111111001001011100010001101' \
          '111001011000100010101110111010011010001110001110111011111011110010001100111001001011111010111111' \
          '111010001010011110001001111001011011111010010111111001101001100010101111111001011010010110000111' \
          '111010001011111110111001111011111011110010011011111001101011010110001110111001011000110110010111' \
          '111001111001101010000100111001011000011010101100111001011010010010101001111001101001100010101111' \
          '111001101011001010100001111001101001110010001001111010011010001110001110111001011010001110110000' \
          '111001111001101010000100111000111000000010000010111001011010111110111001111001001011101010001110' \
          '111001001011100010000000111001001011100010101010111001011000100010011010111001111001010010110001' \
          '111001001011110010100110111001101001010110100110111001011001101110011110111001101001110110100101' \
          '111001111001101010000100111001001011101010111010111011111011110010001100111001011000001110001111' \
          '111001101000100010010001111011111011110010001100111001011000011010101100111001011010010010101001' \
          '111010001010011010000001111010001000001110111101111001111001110010001011111001011011111010010111' \
          '111010001010011110000001111001101001011110100101111001011000010110001001111011111011110010001100' \
          '111001001011111010111111111010001010011110001001111001011011111010010111111001101001100010101111' \
          '111001101000000010101010111001001011101010001011111011111011110010011011111001101011010110001110' \
          '111001011000110110010111111001111001101010000100111001011000011010101100111001011010010010101001' \
          '111001101001100010101111111001011001001110001101111001101001100110110100111001111001101010000100' \
          '111000111000000010000010111010001000011110101010111001111000010010110110111011111011110010001100' \
          '111001011001110010101000111001111000001110101101111001011011100010100110111001111001101010000100' \
          '111001011001110010110000111001101001011010111001111011111011110010001100111001101001011110100101' \
          '111001011000010110001001111001101001100010101111111001101011000010111000111010001011111110011100' \
          '111010011000001010100011111001001011100110001000111001101010111110010010111011111011110010001100' \
          '111001011001001110001101111001001011101010101110111001111001101010000100111001011010010010101001' \
          '111001101011000010010100111011111011110010001100111001011000111110001101111001101001110010001001' \
          '111001111000001010111001111001011000111110101011111001001011101010111010111001011010111010110011' \
          '111001101000000010010101111000111000000010000010111001011000111110101111111001101001100010101111' \
          '111011111011110010001100111001011001110010101000111001011000110010010111111001001011100010101101' \
          '111001011001101110111101111001111001101010000100111001011000011010101100111001011010010010101001' \
          '111011111011110010001100111010001000000010001100111010001000001110111101111001101001110010001001' \
          '111001101011100010101001111001101001100110110100111001111001101010000100111001011010010010101001' \
          '111001101011000010010100111011111011110010001100111001101011010110001110111001011000110110010111' \
          '111001111001110010011111111001011011111010010111111001111010111010010111111001001011100010101010' \
          '111001011010111010011101111001011001110010110000111000111000000010000010'


k = 0
for i in range(img.shape[0]):
    for j in range(img.shape[1]):
        if img[i, j][0] == maxPoint:
            if k < len(message) and message[k] == '1':
                img[i, j][0] = img[i, j][0] + 1
                img[i, j][1] = img[i, j][1] + 1
                img[i, j][2] = img[i, j][2] + 1
            k = k + 1

histNew1 = cv.calcHist([img], [0], None, [256], [0, 256])
plt.title('嵌入信息后的灰度直方图')

plt.plot(histNew1)
plt.show()
print(k)
plt.imshow(img[:, :, ::-1])
plt.title('嵌入信息后的图像')

plt.show()
# 还原
# 进行提取信息
information = ''
for i in range(img.shape[0]):
    for j in range(img.shape[1]):
        if img[i, j][0] == maxPoint:
            information += '0'
        if img[i, j][0] == (maxPoint + 1):
            information += '1'
print(information)




# 将最大值旁边的个数赋值给最大值
histNew1[maxPoint] += histNew1[maxPoint + 1]
histNew1[maxPoint + 1] = 0
print(histNew1[maxPoint])

plt.title('恢复最大值后的直方图')

plt.plot(histNew1)
plt.show()

# 将直方图恢复
for i in range(img.shape[0]):
    for j in range(img.shape[1]):
        if minPoint >= img[i, j][0] > maxPoint:
            img[i, j][0] = img[i, j][0] - 1
            img[i, j][1] = img[i, j][1] - 1
            img[i, j][2] = img[i, j][2] - 1
plt.title('#完全恢复后的直方图')
histNew2 = cv.calcHist([img], [0], None, [256], [0, 256])
plt.plot(histNew2)
plt.show()
